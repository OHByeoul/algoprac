class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        List<List<Integer>> g = new ArrayList<>();
        boolean[] visit = new boolean[n];
        boolean[] color = new boolean[n];
        
        for(int i =0; i<n; i++){
            g.add(new ArrayList<>());
        }
        
        for(int [] d: dislikes){
            int a = d[0]-1;
            int b = d[1]-1;
            g.get(a).add(b);
            g.get(b).add(a);
        }
        
        for(int i = 0; i<n; i++){
            if(!visit[i]){
                visit[i]=true;
                boolean ans = dfs(i,g,visit,color);
                if(!ans) return false;
            }
        }
        return true;
        
    }
    public boolean dfs(int cur, List<List<Integer>> g, boolean[] visit, boolean[] color){
        for(int next: g.get(cur)){
            if(!visit[next]){
                visit[next] = true;
                color[next] = !color[cur];
                boolean ans = dfs(cur,g,visit,color);
                if(!ans) return false;
            } else if(color[cur]==color[next]){
                return false;
            }   
        }
        return true;
        
    }
}