/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode ans = null;
        ListNode cur = null;
        
        if(lists == null || lists.length == 0) return ans;
        
        PriorityQueue<ListNode> pq = new PriorityQueue<>(lists.length, (a,b) -> a.val-b.val);
        
        for(int i = 0; i<lists.length; i++){
            if(lists[i] == null) continue;
            pq.offer(lists[i]);
        }
        
        while(!pq.isEmpty()){
            ListNode node = pq.poll();
            System.out.println(node.val);
            if(node.next != null) pq.offer(node.next);
            if(node.next != null)
                System.out.println("nextval "+node.next.val);
            if(ans == null){
                ans = node;
                cur = node;
                
            } else {
                cur.next = node;
                cur = node;
            }
        }
        return ans;
    }
}