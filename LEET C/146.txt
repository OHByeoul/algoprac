class LRUCache {
    public class Cache {
        int key;
        int value;
        Cache prev;
        Cache next;
        public Cache(int key, int value){
            this.key = key;
            this.value = value;
        }
        
    }
    Cache head;
    Cache tail;
    int capacity;
    Map<Integer, Cache> map;

    public LRUCache(int capacity) {
        head = null;
        tail = null;
        this.capacity = capacity;
        map = new HashMap<>();
    }
    
    public int get(int key) {
        if(!map.containsKey(key)){
            return -1;
        } else {
            Cache curr = map.get(key);
            if(curr != head){
                if(curr == tail){
                    tail = curr.prev;
                }
                if(curr.prev != null) curr.prev.next = curr.next;
                if(curr.next != null) curr.next.prev = curr.prev;
                curr.next = head;
                head.prev = curr;
                curr.prev= null;
                head = curr;
            }
            return curr.value;
        }
        
    }
    
    public void put(int key, int value) {
        if(get(key)== -1){
            Cache curr = new Cache(key,value);
            
            if(head == null){
                head = curr;
                tail = curr;
            } else {
                curr.next = head;
                head.prev = curr;
                head = curr;
            }
            map.put(key,curr);
            
            if(map.size() > capacity){
                map.remove(tail.key);
                tail.prev.next = null;
                tail = tail.prev;
            }
        } else {
            map.get(key).value = value;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */